{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "KQL",
    "scopeName": "source.kql",
    "patterns": [
        { "include": "#headings" },
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#operators" },
        { "include": "#functions" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#variables" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "headings": {
            "patterns": [
                {
                    "name": "markup.heading.kql",
                    "match": "^\\s*(####)\\s+(.+?)\\s*(####)\\s*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.heading.kql"
                        },
                        "2": {
                            "name": "entity.name.section.kql markup.bold.kql"
                        },
                        "3": {
                            "name": "punctuation.definition.heading.kql"
                        }
                    }
                },
                {
                    "name": "markup.heading.kql",
                    "match": "^\\s*(###)\\s+(.+?)\\s*(###)\\s*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.heading.kql"
                        },
                        "2": {
                            "name": "entity.name.section.kql markup.bold.kql"
                        },
                        "3": {
                            "name": "punctuation.definition.heading.kql"
                        }
                    }
                },
                {
                    "name": "markup.heading.kql",
                    "match": "^\\s*(##)\\s+(.+?)\\s*(##)\\s*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.heading.kql"
                        },
                        "2": {
                            "name": "entity.name.section.kql markup.bold.kql"
                        },
                        "3": {
                            "name": "punctuation.definition.heading.kql"
                        }
                    }
                },
                {
                    "name": "markup.heading.kql",
                    "match": "^\\s*(#)\\s+(.+?)\\s*(#)\\s*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.heading.kql"
                        },
                        "2": {
                            "name": "entity.name.section.kql markup.bold.kql"
                        },
                        "3": {
                            "name": "punctuation.definition.heading.kql"
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.kql",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.kql",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.kql",
                    "match": "\\b(and|as|by|consume|count|distinct|evaluate|extend|find|fork|getschema|invoke|join|limit|lookup|make-series|mv-apply|mv-expand|or|order|parse|partition|print|project|project-away|project-keep|project-rename|project-reorder|range|reduce|render|sample|sample-distinct|scan|search|serialize|sort|summarize|take|top|top-hitters|top-nested|union|where)\\b"
                },
                {
                    "name": "keyword.operator.logical.kql",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "keyword.other.kql",
                    "match": "\\b(on|kind|inner|outer|left|right|fullouter|leftanti|rightanti|leftsemi|rightsemi|asc|desc|nulls first|nulls last|between|contains|!contains|contains_cs|endswith|!endswith|has|!has|has_all|has_any|hasprefix|!hasprefix|hassuffix|!hassuffix|in|!in|in~|!in~|matches regex|startswith|!startswith)\\b"
                },
                {
                    "name": "constant.language.kql",
                    "match": "\\b(true|false|null|dynamic)\\b"
                },
                {
                    "name": "storage.type.kql",
                    "match": "\\b(bool|boolean|datetime|decimal|double|dynamic|guid|int|long|real|string|timespan)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.pipe.kql",
                    "match": "\\|"
                },
                {
                    "name": "keyword.operator.comparison.kql",
                    "match": "(==|!=|<|>|<=|>=|=~|!~)"
                },
                {
                    "name": "keyword.operator.arithmetic.kql",
                    "match": "(\\+|-|\\*|/|%)"
                },
                {
                    "name": "keyword.operator.assignment.kql",
                    "match": "="
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.aggregation.kql",
                    "match": "\\b(avg|avgif|count|countif|dcount|dcountif|make_bag|make_list|make_set|max|maxif|min|minif|percentile|percentiles|stdev|stdevif|sum|sumif|variance|varianceif|arg_max|arg_min|any|buildschema|hll|hll_merge|make_bag_if|make_list_if|make_list_with_nulls|make_set_if|tdigest|tdigest_merge)\\b"
                },
                {
                    "name": "entity.name.function.scalar.kql",
                    "match": "\\b(ago|array_concat|array_length|array_slice|array_sort_asc|array_sort_desc|array_split|bag_keys|bag_merge|bag_remove_keys|bin|bin_at|bin_auto|case|ceiling|coalesce|column_ifexists|current_cluster_endpoint|current_database|current_principal|current_principal_details|current_principal_is_member_of|cursor_after|cursor_before_or_at|cursor_current|database|datatable|datetime_add|datetime_diff|datetime_part|dayofmonth|dayofweek|dayofyear|dcount_hll|decode_base64|extract|extract_all|extractjson|floor|format_datetime|format_timespan|geo_distance_2points|geo_distance_point_to_line|geo_point_in_circle|geo_point_in_polygon|geo_point_to_geohash|geo_geohash_to_central_point|geo_polygon_to_s2cells|getmonth|gettype|getyear|hash|hash_combine|hash_many|hash_md5|hash_sha256|hourofday|indexof|indexof_regex|ingestion_time|isascii|isempty|isfinite|isinf|isnan|isnotempty|isnotnull|isnull|isutf8|monthofyear|new_guid|now|pack|pack_all|pack_array|pack_dictionary|parse_command_line|parse_csv|parse_ipv4|parse_ipv4_mask|parse_json|parse_path|parse_url|parse_urlquery|parse_user_agent|parse_version|parse_xml|punycode_from_string|punycode_to_string|rand|range|repeat|replace|replace_regex|replace_string|reverse|round|set_difference|set_has_element|set_intersect|set_union|sign|split|sqrt|startofday|startofmonth|startofweek|startofyear|strcat|strcat_array|strcat_delim|strcmp|string_size|strlen|strrep|substring|table|take_any|todatetime|todecimal|todouble|toguid|tohex|toint|tolong|tolower|tostring|totimespan|toupper|translate|treepath|trim|trim_end|trim_start|unicode_codepoints_from_string|unicode_codepoints_to_string|url_decode|url_encode|url_encode_component|weekofyear|welch_test|zip|array_index_of|array_sum|series_add|series_decompose|series_decompose_anomalies|series_decompose_forecast|series_divide|series_equals|series_fft|series_fill_backward|series_fill_const|series_fill_forward|series_fill_linear|series_fir|series_fit_2lines|series_fit_2lines_dynamic|series_fit_line|series_fit_line_dynamic|series_fit_poly|series_greater|series_greater_equals|series_iir|series_less|series_less_equals|series_multiply|series_not_equals|series_outliers|series_pearson_correlation|series_periods_detect|series_periods_validate|series_seasonal|series_stats|series_stats_dynamic|series_subtract)\\b"
                },
                {
                    "name": "entity.name.function.window.kql",
                    "match": "\\b(row_number|rank|dense_rank|percent_rank|cume_dist|row_cumsum|row_window_session|prev|next)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.kql",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.kql",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.kql",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.kql",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.verbatim.kql",
                    "begin": "@\"",
                    "end": "\""
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.datetime.kql",
                    "match": "\\b\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})?)?\\b"
                },
                {
                    "name": "constant.numeric.timespan.kql",
                    "match": "\\b\\d+(\\.\\d+)?(d|h|m|s|ms|microsecond|tick)\\b"
                },
                {
                    "name": "constant.numeric.float.kql",
                    "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
                },
                {
                    "name": "constant.numeric.integer.kql",
                    "match": "\\b\\d+\\b"
                },
                {
                    "name": "constant.numeric.hex.kql",
                    "match": "\\b0[xX][0-9a-fA-F]+\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.parameter.kql",
                    "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.comma.kql",
                    "match": ","
                },
                {
                    "name": "punctuation.terminator.semicolon.kql",
                    "match": ";"
                },
                {
                    "name": "punctuation.section.parens.kql",
                    "match": "[\\(\\)]"
                },
                {
                    "name": "punctuation.section.brackets.kql",
                    "match": "[\\[\\]]"
                },
                {
                    "name": "punctuation.section.braces.kql",
                    "match": "[\\{\\}]"
                }
            ]
        }
    }
}

